#!/bin/bash
SIZE=Standard_DS2_v2
RND=$(echo $RANDOM | grep -o ..$)
NODE_COUNT=2

usage() { 
    echo "`basename $0`"
    echo "   Usage: " 
    echo "     [-g <group>] Optional: Resource group to use.  Default is supplied if not provided."
    echo "     [-l <region>] Optional:  Region to use.  Default is eastus"
    echo "     [-s <vm-size-by-type>] Optional: Azure VM size. Standard_DS2_v2 is default"
    echo "     [-i <email address>] Optional: Add Ingress and Cert-Manager to cluster.  Email required for Let's Encrypt"
    echo "     [-n <k8s name>] Optional: Name for the Kubernetes cluster.  Defaults are supplied if not provided"
    echo "     [-d <dns name>] Optional: DNS name for the ingress controller.  Defaults are used if not provided."
    echo "     [-c <count>] Optional:  Number of nodes in cluster.  Default is 2."
    echo "     [-v <kubernetes version> Optional: Version to install of Kubernetes.  Default provided"
    echo "     [-f <yaml file>] Optional: Yaml file to apply after cluster creation."
    echo "     [-p ] Optional: Add Prometheus to cluster"
    echo "     [-b ] Optional: Add Kubenetes Dashboard credentials.  This can be insecure in certain circumstances."
    echo "     [-k ] Optional: Add Azure Key Vault Controller and Env Injector."
    echo "     NOTE:  This program requires az, helm and kubectl to execute"
    exit 1
}

# Recurse until we have it
waitForPod() {
    QUERY=""
    for label in "$@"; do
        echo $label
        QUERY+="-l $label "
    done
    echo $QUERY
    SECONDS=0
#    queryPod
    queryPodList
    unset SECONDS
}

queryPodList() {
    CMD="kubectl get pods --all-namespaces $QUERY --no-headers"
    POD_RESULTS=`eval $CMD`
    IFS=$'\n'
    for result in $POD_RESULTS; do
        echo $result
        READY=$( echo $result | awk '{print $3}' | cut -d "/" -f 1 )
        RUNNING=$( echo $result | awk '{print $4}' ) 
        if [ "$RUNNING" != "Running" ] || [ $READY -eq 0 ]; then
            sleep 10
            queryPodList
            if [ $SECONDS -gt 500 ]; then
                echo "ERROR:  Timed out waiting for pod to start"
                exit 1
            fi
        fi
    done
}

randomCharUpper() {
    s=ABCDEFGHIJKLMNOPQRSTUVWXYZ
    p=$(( $RANDOM % 26))
    echo -n ${s:$p:1}
}

randomChar() {
    s=abcdefghijklmnopqrstuvxwyz0123456789
    p=$(( $RANDOM % 36))
    echo -n ${s:$p:1}
}

randomNum() {
    echo -n $(( $RANDOM % 10 ))
}

installPrometheus() {
    # Bug in Prometheus helm package as of 9/23/2019 requires a workaround install
    # See https://github.com/helm/helm/issues/6130
    kubectl apply -f https://raw.githubusercontent.com/coreos/prometheus-operator/master/example/prometheus-operator-crd/alertmanager.crd.yaml
    kubectl apply -f https://raw.githubusercontent.com/coreos/prometheus-operator/master/example/prometheus-operator-crd/prometheus.crd.yaml
    kubectl apply -f https://raw.githubusercontent.com/coreos/prometheus-operator/master/example/prometheus-operator-crd/prometheusrule.crd.yaml
    kubectl apply -f https://raw.githubusercontent.com/coreos/prometheus-operator/master/example/prometheus-operator-crd/servicemonitor.crd.yaml
    # Call with set so that custom resources aren't created... we just created them above
    helm install stable/prometheus-operator --name prometheus-operator --namespace monitor --set prometheusOperator.createCustomResource=false
    
    waitForPod release=prometheus-operator
}

installDashboardCredential() {
    echo "Installing ClusterRoleBinding for Kubernetes Dashboard"
    kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard
}

installKeyVaultTools() {
    echo "Install KeyVault Stuff here"
    kubectl create namespace kvtools
    helm repo add spv-charts http://charts.spvapi.no
    helm repo update
    helm install spv-charts/azure-key-vault-controller --set installCrd=false --namespace kvtools
    waitForPod app=azure-key-vault-controller
    
    helm install spv-charts/azure-key-vault-env-injector --namespace kvtools
    waitForPod app=azure-key-vault-env-injector

}

installCertManager() {
    # Install CRD for cert-manager
    kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.10/deploy/manifests/00-crds.yaml

    # Create namespace
    kubectl create namespace cert-manager

    # Label the cert-manager namespace to disable resource validation
    kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

    # Add the Jetstack Helm repository
    helm repo add jetstack https://charts.jetstack.io

    # Update your local Helm chart repository cache
    helm repo update

    # Install the cert-manager Helm chart
    helm install \
      --name cert-manager \
      --namespace cert-manager \
      --version v0.10.0 \
      jetstack/cert-manager

    waitForPod app.kubernetes.io/instance=cert-manager

    cat << EOF | kubectl apply -f -
apiVersion: certmanager.k8s.io/v1alpha1
kind: ClusterIssuer
metadata:
  name: letsencrypt
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: $INGRESS
    privateKeySecretRef:
      name: letsencrypt
    http01: {}
EOF
    sleep 10
}

createAKSCluster() {
    # Enable_Autoscaler has been disabled for now.  That can never be true
    if ! [ -z $ENABLE_AUTOSCALER ]; then
        SCALE='--enable-cluster-autoscaler --min-count 1 --max-count 5'
    else
        SCALE='--node-count $NODE_COUNT'
    fi

    # Create AKS Cluster
    echo "Creating AKS Cluster.  This will take some time." 
        cmd="az aks create -g $RG -n $NAME $SCALE -l $REGION --ssh-key-value ~/.ssh/id_rsa.pub --kubernetes-version $VERSION"
        eval $cmd
    K8S_RG=$( az resource show -n $NAME -g $RG -o tsv --resource-type Microsoft.ContainerService/managedClusters --query properties.nodeResourceGroup )

    echo "Kubernetes RG=$K8S_RG"

    echo "Wait for $K8S_RG to become a real thing."
    until az group show -g $K8S_RG 2>/dev/null; do
        echo "nap for 30s while waiting."
        sleep 30
    done
    echo "Okay $K8S_RG is real now.  Let's move on."

    #Monitoring only supported in Commercial right now 
    if ! [[ "$CLOUD" =~ "Government" ]]; then
        echo "Enable AKS Monitoring"
        az aks enable-addons -a  monitoring -n $NAME -g $RG
    fi

    # Print out Cluster Info
    # az resource show \
    #      -n $NAME -g $RG -o json \
    #      --resource-type Microsoft.ContainerService/managedClusters || exit 1
}

createResourceGroup() {
    # Create a resource group if one doesn't exist
    az group show -n $RG 2> /dev/null
    if [ $? -ne 0 ]; then
        echo "Creating Resource Group $RG..."
        az group create --name $RG --location $REGION 1> /dev/null
    fi
    GROUP_ID=$(az group show -g $RG --query "id" -o tsv)
}

# Get PublicIP of Load Balancer
# Recurse until we have it
getPublicIPofLoadBalancer() {
    PUBLIC_IP=$( kubectl get services --namespace=ingress-nginx -l app=nginx-ingress -l component=controller --no-headers | awk '{print $4}' )
    if ! [[ $PUBLIC_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        if [ $SECONDS -gt 500 ]; then
            echo "ERROR:  Timed out getting IP of Load Balancer"
            exit 1
        fi
        sleep 20 
        getPublicIPofLoadBalancer
    fi
}

setDNSNameForIngress() {
    SECONDS=0
    getPublicIPofLoadBalancer
    PUBLIC_IP_ID=$( az network public-ip list --query "[?ipAddress!=null]|[?contains(ipAddress, '$PUBLIC_IP')].[id]" -o tsv )
    if [ -z $PUBLIC_IP_ID ]; then
        echo "ERROR:  Cound not get Azure ID of public ip address"
        az network public-ip list -o json 
        exit 1
    fi
    unset SECONDS
    # Update public ip address with DNS name
    az network public-ip update --ids $PUBLIC_IP_ID --dns-name $DNS || exit 1

    # Now that DNS is set let's get the FQDN
    K8S_FQDN=$( az network public-ip list --query "[?ipAddress!=null]|[?contains(ipAddress, '$PUBLIC_IP')].[dnsSettings.fqdn]" -o tsv )
}

# Check beforehand to see if cluster exists
clusterExists() {
    az resource show \
        -n $NAME -g $RG \
        -o json \
        --resource-type Microsoft.ContainerService/managedClusters 2> /dev/null

    if [ $? -eq 0 ]; then
        CLUSTER_EXISTS=1
    fi
}

kubectlContextExists() {
    IFS=$'\n'
    for context in $(kubectl config get-contexts --no-headers);
    do
        current=$(echo $context | awk '{print $2}')
        if [ "$current" == "$NAME" ]; then
            KUBECTL_EXISTS=1
        fi
    done
}

getAKSVersions() {
    AKS_VERSIONS=$(az aks get-versions -l $REGION -o json --query "orchestrators[?isPreview==null].orchestratorVersion" -o tsv)
    echo $AKS_VERSIONS
}

installIngress() {
    kubectl create namespace ingress-nginx
    if [ $? -eq 0 ]; then
        helm install stable/nginx-ingress \
            --namespace ingress-nginx \
            --set controller.service.externalTrafficPolicy=Local \
            --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux
        if [ $? -ne 0 ]; then
            echo "Failed to install nginx-ingress helm package"
            exit 1
        fi
        kubectl get service -l app=nginx-ingress --namespace ingress-nginx
        waitForPod app=nginx-ingress component=controller
    fi
}

initializeTiller() {
    cat << EOF | kubectl apply -f - 
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system
EOF
    helm init \
        --service-account tiller \
        --node-selectors "beta.kubernetes.io/os=linux" || exit 1
    waitForPod app=helm name=tiller
}

# Catch any help requests
for arg in "$@"; do
  case "$arg" in
    --help| -h) 
        usage
        ;;
  esac
done

while getopts pbkav:l:i:s:n:g:d:c:f: option
do
    case "${option}"
    in
        l) REGION=${OPTARG};;
        i) INGRESS=${OPTARG};;
        p) PROMETHEUS=true;;
        b) DASHBOARD=true;;
        k) KV=true;;
        s) SIZE=${OPTARG};;
        n) NAME=${OPTARG};;
        g) RG=${OPTARG};;
        c) COUNT=${OPTARG};;
        d) DNS=${OPTARG};;
        v) VERSION=${OPTARG};;
        f) YAML_SCRIPT=${OPTARG};;
        *) usage;;
        : ) usage;;
    esac
done
shift "$(($OPTIND -1))"

command -v az 2&> /dev/null
if [ $? -ne 0 ]; then
    echo "ERROR: Requires Azure CLI (az).  Aborting..."
    exit 1
fi

command -v helm 2&> /dev/null
if [ $? -ne 0 ]; then
    echo "ERROR: Requires Helm (helm). Aborting..."
    exit 1
fi

command -v kubectl 2&> /dev/null
if [ $? -ne 0 ]; then
    echo "ERROR: Requires Kubectl (kubectl). Aborting..."
    exit 1
fi


# Check if Resource Group has been passed in, if not we will create one
if [ -z "$RG" ]; then
    RG=K8s-$RANDOM
fi

if [ -z "$NAME" ]; then
    NAME=myK8sCluster-$RND
fi

# Test that any custom data that is passed in exists
if ! [ -z "$YAML_SCRIPT" ]; then
    if ! [ -f "$YAML_SCRIPT" ]; then
        echo "Yaml file does not exist"
        exit 1
    fi
fi

if ! [ -z "$COUNT" ]; then
    NODE_COUNT=$COUNT
    if [ "$NODE_COUNT" -lt 1 ] || [ "$NODE_COUNT" -gt 5 ]; then
        echo "ERROR:  Count must be between 1 and 5"
        exit 1
    fi
fi

# Check if DNS name is passed in
if [ -z "$DNS" ]; then
    DNS=$(echo $NAME | sed -e 's/-//g' | awk '{print tolower($0)}')
fi

az account show 2>&1
if [ $? -ne 0 ]; then
    echo "ERROR:  Log into azure cli before continuing"
    exit 1
fi

CLOUD=$( az account list -o json --query "[0].name" -o tsv 2>&1 )
echo $CLOUD

# Check if REGION is passed in otherwise set defaults
if [ -z "$REGION" ]; then
    if [[ "$CLOUD" =~ "Government" ]]; then
        REGION=usgovvirginia
    else 
        REGION=eastus
    fi
fi

echo "Using REGION=$REGION"

# Set variables that contains all currently supported versions of AKS
getAKSVersions

# Check if AKS version is supported in region
if ! [ -z "$VERSION" ]; then
    echo $AKS_VERSIONS | grep $VERSION
    if [ $? -ne 0 ]; then
        echo "Version not currently supported in Azure region"
        exit 1
    fi
else
    VERSION=$( echo $AKS_VERSIONS | xargs -n1 | tail -n1 )
fi

# Check if Cluster and Resource Group already exists
clusterExists
if ! (($CLUSTER_EXISTS)); then
    read -r -d '' CLUSTER_EXISTS_MESSAGE <<EOF
### WARNING ###:  AKS Cluster with name=$NAME in rg=$RG does not exist.  Create it? [y/N]
EOF
    read -p "$CLUSTER_EXISTS_MESSAGE" CLUSTER_ANSWER
    if ! [[ $CLUSTER_ANSWER =~ [yY](es)* ]]; then
        echo "Okey Dokey will exit and let you think about it"
        exit 0
    else
        CREATE_CLUSTER=1
    fi
fi

# Check if kubectl context already exists
kubectlContextExists
if (($KUBECTL_EXISTS)); then
    read -r -d '' KUBECTL_MESSAGE <<EOF
Local kubectl context exists for this cluster.  Continue? [y/N]
EOF
    read -p "$KUBECTL_MESSAGE" KUBECTL_ANSWER
    if ! [[ $KUBECTL_ANSWER =~ [yY](es)* ]]; then
        echo "Okey Dokey will exit and let you think about it"
        exit 0
    fi
fi

# Check if resource group exists if not create it
if (($CREATE_CLUSTER)); then
    createResourceGroup
fi

# Create AKS Cluster
if (($CREATE_CLUSTER)); then
    createAKSCluster
fi

# Get kubectl context
az aks get-credentials -n $NAME -g $RG

# Install Helm Tiller
initializeTiller

# Install Ingress Controll
if ! [ -z $INGRESS ]; then
    installIngress
    # Setup DNS name for Load Balancer
    setDNSNameForIngress
    echo "Public IP=$PUBLIC_IP"
    installCertManager
fi

# Setup cert-manager
if ! [ -z $DASHBOARD ]; then
    installDashboardCredential
fi

# install Prometheus/Grafana
if ! [ -z $PROMETHEUS ]; then
    installPrometheus
fi

# install KeyVault Controller and Env Injector
if ! [ -z $KV ]; then
    installKeyVaultTools
fi

# apply script if it was passed in
if ! [ -z "$YAML_SCRIPT" ]; then
    cat $YAML_SCRIPT | kubectl apply -f -
fi

echo "$K8S_FQDN" created

