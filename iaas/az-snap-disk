#!/bin/bash
# az-snap-disk - Author: Brent McConnell
# 
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Snapshots all disks for an entire resource group

usage() { 
    echo "`basename $0`"
    echo "   Usage: " 
    echo "     [-g <group>] resource group to scan for disks to snapshot"
    echo "     (-t <group>) optional: target resource group to place snapshots in. Default is the scanned resource group"
    echo "     (-i ) optional: ignore prompts and just run. " 
    exit 1
}

# Catch any help requests
for arg in "$@"; do
  case "$arg" in
    --help | -h) 
        usage
        ;;
  esac
done

validateTools() {
echo "Check program requirements..."
(
    set +e
    programs=(az awk jq)
    missing=0
    for i in ${programs[@]}; do
        command -v $i 2&> /dev/null
        if [ $? -eq 0 ]; then
            echo " * Found $i"
        else
            echo " * ERROR: missing $i"
            missing=1
        fi
    done
    if [[ "$missing" -ne 0 ]]; then
        echo "Missing required commands"
        exit 1
    fi
)
}

validateTools

while getopts g:t:i option
do
    case "${option}"
    in
        g) RG=${OPTARG};;
        t) TRG=${OPTARG};;
        i) NO_PROMPT=true;;
        *) usage;;
        : ) usage;;
    esac
done
shift "$(($OPTIND -1))"

if [ -z $RG ]; then
  echo "-g required.  Resource group is required"
  exit 1
fi

if [ -z $TRG ]; then
  TRG=$RG
fi

echo "Setting Target Resource Group = $TRG"

NOW=$( date +'%m%d%Y-%H%M%S' )

if [ -z $NO_PROMPT ]; then
  # Verify if we want to proceed if running in interactive mode
  echo -e "\nNOTE: This is going to snapshot all disks in '$RG' and place in '$TRG'!\n"
  read -p "Are you sure you want to Proceed [y/N]?"
  if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
      exit 1
  fi
fi

JSON=$( az resource list -g $RG --query "[?type=='Microsoft.Compute/disks']" )

#Snap Disk
for DISK_ID in $( echo $JSON | jq -r '.[] | .id' ); do
  NAME=$(echo $DISK_ID | awk -F / '{print $NF}')
  echo "Snapping Disk = $NAME..."
  az snapshot create -n $NAME-$NOW-snap -g $TRG --source $DISK_ID --query "{DiskName:name, DiskID:id}"
done

